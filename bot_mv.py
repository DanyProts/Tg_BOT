import pandas as pd
import re
import telebot
from telebot import types
from yandex_gpt_main import yandex_gpt, save_message
import ast
import psycopg2
from bs4 import BeautifulSoup
from base_functions import search1
from rag_functions import rel_inf, example, study_plan, specialties_list, specialties_with_kod
from model_util import model, device, tokenizer
from dotenv import load_dotenv
import os
import time

load_dotenv()

api_key = os.getenv("API_KEY")
debug_mode = os.getenv("DEBUG")

bot = telebot.TeleBot(api_key, parse_mode='HTML')  
bot.remove_webhook()
CHAT_HISTORY_DIR = "chat_history"

db_params = {
    "host": os.getenv("DB_HOST"),
    "port": int(os.getenv("DB_PORT")),
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASS")
}
table_sp = ['FAQ','specialties','disciplines','enterprises_new','individual_achievements','departments']

for i in range(len(table_sp)):
  table_name = table_sp[i]
  try:
      conn = psycopg2.connect(**db_params)
      if i == 0:
          query = f'SELECT * FROM "{table_name}"';
          df = pd.read_sql_query(query, conn)
          print(df.head())
      if i == 1:
          query = f'SELECT * FROM "{table_name}"';
          df1 = pd.read_sql_query(query, conn)
          print(df1.head())
      if i == 2:
          query = f'SELECT * FROM "{table_name}"';
          df2 = pd.read_sql_query(query, conn)
          print(df2.head())
      if i == 3:
          query = f'SELECT * FROM "{table_name}"';
          df3 = pd.read_sql_query(query, conn)
          print(df3.head())
      if i == 4:
          query = f'SELECT * FROM "{table_name}"';
          df4 = pd.read_sql_query(query, conn)
          print(df4.head())
      if i == 5:
          query = f'SELECT * FROM "{table_name}"';
          df5 = pd.read_sql_query(query, conn)
          print(df5.head())
  except Exception as e:
      print(f'–æ—à–∏–±–∫–∞ :{e}')
  finally:
      conn.close()

  

def convert_markdown_to_html(text):
    text = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", text)   # –∂–∏—Ä–Ω—ã–π
    text = re.sub(r"__(.*?)__", r"<u>\1</u>", text)       # –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π
    text = re.sub(r"\*(.*?)\*", r"<i>\1</i>", text)       # –∫—É—Ä—Å–∏–≤
    text = re.sub(r"`(.*?)`", r"<code>\1</code>", text)   # –∫–æ–¥
    return text

def convert_to_telegram_html(text: str) -> str:
    text = convert_markdown_to_html(text)
    text = text.replace("\\n", "\n").replace("\n\n", "\n")
    soup = BeautifulSoup(text, "html.parser")
    for tag in soup.find_all():
        if tag.name not in ['b', 'strong', 'i', 'em', 'u', 's', 'code', 'pre', 'a']:
            tag.unwrap()
    return str(soup)





def main(request_user,df,df1,df2,df3,df4,df5):
    
    functions = {
        0:rel_inf,
        1:rel_inf,
        2:rel_inf,
        3:rel_inf,
        4:rel_inf,
        5:rel_inf,
        6:rel_inf,
        7:rel_inf,
        8:rel_inf,
        9:rel_inf,
        10:rel_inf,
        11:rel_inf,
        12:rel_inf,
        13:rel_inf,
        14:rel_inf,
        15:rel_inf,
        16:rel_inf,
        17:rel_inf,
        18:rel_inf,
        19:rel_inf,
        20:rel_inf,
        21:rel_inf,
        22:rel_inf,
        23:rel_inf,
        24:rel_inf,
        25:rel_inf,
        26:rel_inf,
        27:rel_inf,
        28:rel_inf,
        29:rel_inf,
        30:rel_inf,
        31:rel_inf,
        32:rel_inf,
        34:rel_inf,
        35:rel_inf,
        36:rel_inf,
        37:rel_inf,
        38:rel_inf,
        39:rel_inf,
        40:rel_inf,
        43:rel_inf,
        44:rel_inf,
        45:rel_inf,
        46:rel_inf,
        47:rel_inf,
        48:rel_inf,
        49:rel_inf,
        169:rel_inf,
        170:rel_inf,
        41:study_plan,
        89:study_plan,
        118:study_plan,
        122:study_plan,
        124:study_plan,
        127:study_plan,
        130:study_plan,
        132:study_plan,
        135:study_plan,
        136:study_plan,
        138:study_plan,
        140:study_plan,
        141:study_plan,
        144:study_plan,
        200:specialties_with_kod,
        201:specialties_with_kod,
        202:specialties_with_kod,
        203:specialties_list,
        204:example
    }
    
    
    embedding = df['emb_FAQ'].apply(ast.literal_eval)
    
    num = int(search1(request_user,embedding))
    
    if num != -1:
      print(num, df.loc[num, '–¢–∞–±–ª–∏—Ü–∞\n'])
      try:
          
          args = [request_user,model,device,tokenizer,num,df,df1,df2,df3,df4,df5]
          result = functions[num](*args)
          return(result)
      except:
          result = example(request_user,model,device,tokenizer,num,df,df1,df2,df3,df4,df5)
          return(result)
    else:

      return('–ü—Ä–∏–¥—É–º–∞–π –æ—Ç–≤–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton("üëã –°–ø—Ä–æ—Å–∏—Ç—å")
    btn2 = types.KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    btn3 = types.KeyboardButton("üìÖ –î–∞—Ç—ã")
    btn4 = types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    btn5 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    btn6 = types.KeyboardButton("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üòà")

    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5, btn6)

    bot.send_message(
        message.chat.id, 
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ú–ì–¢–£. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=markup
    )

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    
    list_massage = pd.read_csv('Massage_list.csv')
    save_message(message.from_user.id,message.text,'user')
    error_list = pd.read_csv('Mistake_question.csv')
    try:
        if message.text == 'üëã –°–ø—Ä–æ—Å–∏—Ç—å':
            save_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ú–ì–¢–£, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.",'assistant')
            bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ú–ì–¢–£, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.")
        elif message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ':
            save_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ú–ì–¢–£, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç. –Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å –¥—É–º–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É!",'assistant')
            bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ú–ì–¢–£, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç. –Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å –¥—É–º–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É!")
        elif message.text == 'üìÖ –î–∞—Ç—ã':
            save_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ú–ì–¢–£, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.",'assistant')
            bot.send_message(message.from_user.id, "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ https://bmstu.ru/documents")
        elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
            save_message(message.from_user.id,"–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: ```+7\(499\)263\-65\-41```\n–ù–∞—à–∞ –ø–æ—á—Ç–∞: ```abiturient@bmstu\.ru```\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞ https://bmstu\.ru/admission\-board",'assistant')
            bot.send_message(
                message.from_user.id, 
                "–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: ```+7\(499\)263\-65\-41```\n–ù–∞—à–∞ –ø–æ—á—Ç–∞: ```abiturient@bmstu\.ru```\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞ https://bmstu\.ru/admission\-board", 
                parse_mode="MarkdownV2"
            )

        elif message.text == '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
            save_message(message.from_user.id,"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å, –∞ –µ—Å–ª–∏ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω ```+7\(499\)263\-65\-41``` –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É ```abiturient@bmstu\.ru```",'assistant')
            bot.send_message(
                message.from_user.id, 
                "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å, –∞ –µ—Å–ª–∏ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω ```+7\(499\)263\-65\-41``` –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É ```abiturient@bmstu\.ru```", 
                parse_mode="MarkdownV2"
            )
        elif message.text == '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üòà':
            id = message.from_user.id
            
            try:
                
                for i in range(len(list_massage)-1,-1,-1):
                    
                    if  id == int(list_massage.loc[i, 'user_id']):
                        
                        error_list.loc[len(error_list)]=[list_massage.loc[i, 'Question'],list_massage.loc[i, 'Answer']]
                        break
                
                error_list.to_csv('Mistake_question.csv',index=False)
                save_message(message.from_user.id,"–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –∏ –∏—Å–ø—Ä–∞–≤–∏–º –æ—à–∏–±–∫–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!",'assistant')
                bot.send_message(message.from_user.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –∏ –∏—Å–ø—Ä–∞–≤–∏–º –æ—à–∏–±–∫–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!")
            except:
                save_message(message.from_user.id,'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!','assistant')
    
                bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        else:
            
            prompt = main(message.text,df,df1,df2,df3,df4,df5)
            print(prompt)
            response = yandex_gpt(message.from_user.id,prompt) 
            print('–º–æ–¥–µ–ª—å –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç')   
            save_message(message.from_user.id,response,'assistant')
            
            result = convert_to_telegram_html(response)
            
            list_massage.loc[len(list_massage)]=[message.text,result,message.from_user.id]
            
            list_massage.to_csv('Massage_list.csv',index=False)
            if result == None:
                bot.send_message(message.from_user.id, "–í –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥—É–º–∞—Ç—å")
                bot.send_message(message.from_user.id, "‚è≥ –î—É–º–∞—é...")
                bot.send_message(message.from_user.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏ —è –æ—Ç–≤–µ—á—É –µ—â–µ —Ä–∞–∑")
            else:
              
              bot.send_message(message.from_user.id, result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        save_message(message.from_user.id,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–≤—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—å–±–∞ –Ω–∞–∂–∞—Ç—å –ø–æ–ª–µ: '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üòà'",'assistant')
        bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–≤—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—å–±–∞ –Ω–∞–∂–∞—Ç—å –ø–æ–ª–µ: '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üòà'")


def start_polling():
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Exception in polling: {e}")
            time.sleep(5) # —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏ –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        else:
            print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
            break

if __name__ == "__main__":
    start_polling()